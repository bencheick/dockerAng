m3 Installing a Private Docker Registry
Unlike Docker Trusted Registry and Datacenter - both of which I briefly discussed a while back - Docker Registry is one of the core open source Docker projects and will, by definition, always be available for free. because Docker Registry servers are installed locally, they can be both really secure and really fast. Even if you decide to install your Docker Registry server on a cloud platform like AWS, because you control it, you can easily restrict access to a secure VPN - or at least to clients able to find their way in through firewall rules like those of this AWS security group.  
It may somehow be possible to torture a Windows or Mac PC into running Docker Register, but I can't imagine the whole thing being worth the effort. For most of us, working with a virtual Linux server on VirtualBox is probably a cleaner solution. I will note that, if you're using a Mac that's already got Docker running, then it might not be possible to launch VirtualBox at the same time. 
I'm going to use Ubuntu, but I'll also note any differences between what I'll be doing and the way it's done on CentOS or Red Hat as we go. 
Whatever distribution you're running, you'll need to make sure that port 5000 is open on the server. By default, Ubuntu ships with all ports wide open, so that won't give us any trouble. But if you're using CentOS or Red Hat, you'll need to open the port manually. You can do this with this firewall-cmd and add-port=5000. The second command with the --permanent flag ensures that this rule will persist through a reboot. If your server is running on a cloud platform then, naturally, you'll need to open up port 5000 on their security group.
There are two very different ways to install Docker Registry on a server. One is by installing the Docker-Registry package through your package manager. The other approach involves pulling the Docker registry image and running it as a container.
To be honest, I'm not sure which approach is preferred. On the one hand, Docker documentation seems to give the container option more visibility, but I've also read that container-based registries don't scale quite as well. Who knows? 
Either way, while I'll show you how to install from a package manager in the next clip, right now I'll quickly pull the image from Docker Hub. 
How to pull the Docker registry image won't be a struggle for you to figure out at this point. There's no reason why we shouldn't request the latest version, whatever the version number might be. The -p flag on my run command opens up port 5000. I could also add a -d to detach myself from the container - which is probably the way you'll normally go. Doing it this way - without the -d - will add you to the shell so you can keep an eye on pulls and pushes by reading the ongoing system output. The downside to this is that bailing out by hitting CTRL and c will close the container.
That's the container method. Coming up next: getting it done with a package manager.
Now, as advertised, I'll get docker Registry going using the Debian/Ubuntu apt software package manager. For CentOS machines, just substitute Yum for apt. We'll make sure that our installation is successful - which may prove more complicated than you think - then push an image to the registry, and confirm that everything is working. 
I'll start by updating the local apt index so we'll be sure we're getting the most recent version available from the Debian repositories. Then it's just a matter of apt install docker-registry and we should be done. Since Ubuntu 16.04 - like recent versions of most Linux distributions - uses the Systemd process manager, I'll start it up with systemctl start and confirm it's running with systemctl status. 
Whoops! We've got ourselves a bug! As it turns out, this version of docker-registry is still a bit behind and there's been a problem with Docker establishing appropriate permissions for certain configuration files during installation. That's what's behind all this. The bug was patched more than a year ago, but the patched version hasn't yet found its way into all upstream repositories. By the time you see this, everything might well be working fine, and I would recommend that you try the apt install version first. If you do have trouble though, here's what we're going to do: I'll browse over to the docker-registry page on the Debian repo pages. The best way to find it is to search for something like "debian download docker". From there, I'll scroll down and click on the amd64 link - since my VM is 64 bit. The quickest way to get this done is to find a download link, right click and get the URL, and then, back on the Docker server, add it to a wget command. That will download the package. To install it, I'll run dpkg, -i, and the name of the package we just downloaded. Apt will do the rest. 
Now, we're back where we should have been a few minutes ago. I'll start up docker-registry once again and check its status...this time, it looks fine. I'll check the docker-registry version once again to confirm we're working with something a bit more up-to-date, and then use systemctl enable so it will launch every time the system boots.
Ok. We're finally ready to take our registry out for a test drive. I'm going to download a really small image from Docker Hub by running hello-world. When that's done, I'll use docker images to see what's new. Just an image called hello-world. I'm going to push a copy of this image up to my docker-registry - which is distinct from the images stored locally by my Docker Engine. Docker knows where to send an image when it's pushed by looking at the address label. The address label is actually contained in the tag you assign the image. I'm going to give the hello-world its address tag through docker tag. Since it's running on the same machine, localhost is the address of the registry - but you can also use an IP address or a domain name. 5000 is the port you'll use to access the registry, and hello-world:latest is the image name. 
"Docker images" shows us that we now have two images in our local collection: the original hello-world image and the one we just tagged. I'm going to push the tagged image...which seems to go without trouble. To confirm our success, I'll remove the two local images - using rmi (for remove image) and -f to force it in case either image is in use by a container. Another call to docker images shows us that the bag is currently empty. I'll pull the image back onto our local system using its full tag and name. There's no way that this one would have come from Docker Hub, not only because the address we gave it is all wrong, but because it came so quickly.
Of course, we were able to pull this image from our registry only because we happened to know its name. It would certainly be helpful - especially once registry activity starts heating up - to be able to see what's available at any given time. As strange as it seems, the most direct way to get a list of images in the registry that I've found so far is by using curl against the /v2/_catalog file in the Docker Registry file system. 
This will also work from any machine with network access by specifying the registry's address. 
Nice. We've got a working registry all set to serve images to clients near and far. Well, nearly all set. Before we're really done, we'll have to make some decisions about where the images will be stored, and we'll really have to give some attention to securing our images as they move back and forth between clients. 

Building your own Docker Registry is all about storing and managing your images on your own terms. But that also makes it your responsibility. You are now the "here" where the buck stops and you're the one who has got to make sure your images remain reliably available over the long term. So then it makes to spend at least a couple of minutes talking about just where and how those images are going to be stored. 
By default, a package-based docker registry will store its images in directories within the /var/lib/docker-registry/ tree. Now, this is a big tree, as it's taking us quite a few levels down before we finally get to the repositories directory which contains our hello-world image. 
But wait 'till you see where *container-based* docker registries put your images. I'm not going to drill down there manually, but it is important that I explain what it all means. You will notice that the first directories - /var/lib/docker - are the same directories on a host machine used by the package based registry. That, more or less, is where all Docker resources are kept. However, the next level down is "volumes" - which are data objects for holding and managing Docker files. 

You can actually create and populate your own volumes and mount them into containers as they launch. In fact, I think I'll show you how. docker volume create will build an empty volume using, by default, the local driver. You could also import driver plug-ins like flocker, which you would then specify with the -d flag. Once it exists, a volume can be added to a container as part of its run command. 
So what does all this have to do with us right now? Well, Docker Registry stores its images within a volume on the host machine. Thus, this nutty hash of a title is the name of the registry volume. Everything below that is the more or less normal directory hierarchy you would expect, leading eventually to our images.
And just why is this important? Because if you don't know where your images are kept, how are you going to be able to back them up? Didn't think of that, did you?

In many cases and for many reasons it can make sense to outsource your storage. Perhaps you'd rather have Docker Registry save your images to a bucket on Amazon's S3 service. That way, you can rely on Amazon's robust reliability and security while, as often as not, save yourself some money. Well it can be done, and not only using S3, but other cloud services like Azure Blob Storage, Swift, and Google Cloud Storage. Walking you through the process is a bit beyond the scope of this course, but Docker's Storage Driver API was built for just this purpose, and there's reasonably complete documentation for each of the available platforms.

Let's review. We learned how Docker Registry can be installed either through your yum or apt package manager or as a Docker container. You point an image to your registry by tagging it with the network address of the registry and the port through which it can be reached - which is usually port 5000. By default, installed registries store images beneath the /var/lib/docker-registry directory, while container registries use a Docker volume beneath /var/lib/docker/. Finally, you can also have your registry store images on cloud platforms like Amazon's S3 using the Storage Driver API.

That's storage taken care of. But there's one more thing you'll need to master if you want to roll your own image repository: security. How can you ensure that there's no one messing with the images flying back and forth over network connections? That's the subject of the next module. See you there.


